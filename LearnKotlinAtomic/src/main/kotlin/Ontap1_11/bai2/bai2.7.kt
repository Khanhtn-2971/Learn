package org.example.Ontap1_11.bai2

fun String?.isValidEmail(): Boolean {

    return when {
        this == null -> false
        !this.startsWith("STAFF_") -> false
        this.length < 10 -> false
        !Regex(".*_\\d+$").matches(this) -> false
        else -> true
    }
    /*
        val parts = this.split("_")
        if (parts.size < 3) return false  // Ph·∫£i c√≥ √≠t nh·∫•t 3 ph·∫ßn: STAFF, <t√™n>, <s·ªë>
        if (parts[0] != "STAFF") return false
        val name = parts[1]
        val nameLength = name.length
        if (this.length < 10) return false
        val lastPart = parts[2]
        if (!lastPart.all { it.isDigit() }) return false
     */
}


fun List<String?>.uniqueValidEmails(): Set<String> {
    return this.filterNotNull()
        .filter { it.isValidEmail() }
        .toSet()
}

fun Map<Int, List<String>>.printGroupedEmails() {
    this.forEach { (key, values) ->
        println("ƒê·ªô d√†i $key:")
        println(values.joinToString("\n") { "- $it" })
    }
}

fun main() {
    val rawEmails = listOf(
        "STAFF_John_123", "staff_Mary_456", null, "INVALID", "STAFF_Anna_789",
        "STAFF_John_123", "", "STAFF_Bob_101", "STAFF_A_1"
    )
    println("‚úÖ M√£ h·ª£p l·ªá:")
    val validEmails = rawEmails.uniqueValidEmails()
    validEmails.groupBy { it.split("_")[1].length }.printGroupedEmails()
    val invalidCodes = rawEmails.filter { it == null || !it.isValidEmail() }
    if (invalidCodes.isEmpty()) {
    } else {
        println("\n‚ùå M√£ b·ªã lo·∫°i:")
        invalidCodes.forEach { println("- ${it ?: "null"}") }
    }

    println("\nüìä Th·ªëng k√™:")
    println("- T·ªïng s·ªë email ƒë·∫ßu v√†o: ${rawEmails.size}")
    println("- Email h·ª£p l·ªá: ${validEmails.size}")
    println("- Email kh√¥ng h·ª£p l·ªá: ${rawEmails.size - validEmails.size}")
}

/*
/**
 * Ki·ªÉm tra email h·ª£p l·ªá: b·∫Øt ƒë·∫ßu b·∫±ng "STAFF_", ƒë·ªô d√†i >= 10, k·∫øt th√∫c b·∫±ng s·ªë.
 */
fun String?.isValidEmail(): Boolean {
    if (this == null || !this.startsWith("STAFF_") || this.length < 10) return false
    val parts = this.split("_")
    if (parts.size < 3) return false // Ph·∫£i c√≥ √≠t nh·∫•t 3 ph·∫ßn: STAFF, t√™n, s·ªë
    return parts.last().toIntOrNull() != null // Ph·∫ßn cu·ªëi ph·∫£i l√† s·ªë
}

/**
 * L·ªçc danh s√°ch email, b·ªè null v√† tr√πng l·∫∑p, tr·∫£ v·ªÅ t·∫≠p h·ª£p email h·ª£p l·ªá.
 */
fun List<String?>.uniqueValidEmails(): Set<String> {
    return this.filterNotNull()
        .filter { it.isValidEmail() }
        .toSet()
}

/**
 * In email ƒë√£ nh√≥m theo ƒë·ªô d√†i t√™n, hi·ªÉn th·ªã s·ªë email m·ªói nh√≥m.
 */
fun Map<Int, List<String>>.printGroupedEmails() {
    if (this.isEmpty()) {
        println("Kh√¥ng c√≥ email h·ª£p l·ªá.")
        return
    }
    this.forEach { (length, emails) ->
        println("ƒê·ªô d√†i t√™n $length (T·ªïng: ${emails.size} email):")
        println(emails.joinToString("\n") { "- $it" })
    }
}

/**
 * Ch∆∞∆°ng tr√¨nh ch√≠nh: in email h·ª£p l·ªá, kh√¥ng h·ª£p l·ªá, v√† th·ªëng k√™.
 */
fun main() {
    val rawEmails = listOf(
        "STAFF_John_123", "staff_Mary_456", null, "INVALID", "STAFF_Anna_789",
        "STAFF_John_123", "", "STAFF_Bob_101", "STAFF_A_1"
    )

    // L·∫•y email h·ª£p l·ªá v√† nh√≥m theo ƒë·ªô d√†i t√™n
    val validEmails = rawEmails.uniqueValidEmails()
    val groupedEmails = validEmails.groupBy { it.split("_")[1].length }

    // In email h·ª£p l·ªá
    println("‚úÖ Email h·ª£p l·ªá (T·ªïng: ${validEmails.size} email):")
    groupedEmails.printGroupedEmails()

    // In email kh√¥ng h·ª£p l·ªá
    println("\n‚ùå Email b·ªã lo·∫°i:")
    val invalidEmails = rawEmails.filter { !it.isValidEmail() }
    if (invalidEmails.isEmpty()) {
        println("Kh√¥ng c√≥ email b·ªã lo·∫°i.")
    } else {
        invalidEmails.forEach { println("- ${it ?: "null"}") }
    }

    // Th·ªëng k√™
    println("\nüìä Th·ªëng k√™:")
    println("- T·ªïng s·ªë email ƒë·∫ßu v√†o: ${rawEmails.size}")
    println("- Email h·ª£p l·ªá: ${validEmails.size}")
    println("- Email kh√¥ng h·ª£p l·ªá: ${rawEmails.size - validEmails.size}")
}
 */